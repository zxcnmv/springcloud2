#druid连接池公共配置
spring:
  datasource:
    druid:
      initialSize: 5
      minIdle: 5
      maxActive: 20
      validationQuery: SELECT 1
      maxWait: 60000
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      filters: stat,slf4j
      connectionProperties: druid.stat.slowSqlMillis=5000
      web-stat-filter:
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*,/swagger*,/v2/*,*.xls,*.xlsx,*.xlsm"
      stat-view-servlet:
        url-pattern: /druid/*
        login-username: druid
        login-password: druid
        allow:
        deny:
        reset-enable: false
#      filter:
#        wall:
#          enabled: true
#          config:
#            multi-statement-allow: true
mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
#  mapper-locations: classpath:/com/xangqun/entity/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
#  typeAliasesPackage: com.xangqun.*.entity
  global-config:
    db-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: UUID
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      field-strategy: NOT_EMPTY
      #驼峰下划线转换
      table-underline: true
      #mp2.3+ 全局表前缀 mp_
      #table-prefix: mp_
      #刷新mapper 调试神器
      #refresh-mapper: true
      #数据库大写下划线转换
      #capital-mode: true
      # Sequence序列接口实现类配置
      #key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator
      #逻辑删除配置（下面3个配置）
      logic-delete-value: 1
      logic-not-delete-value: 0
      #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
      #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.mybatisplus.core.handlers.MetaObjectHandler
  configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    #   这个配置使全局的映射器启用或禁用缓存。系统默认值是true
    cache-enabled: false
    #全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 系统默认值是true
    lazyLoadingEnabled: true
    #允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。 系统默认值是true
    multipleResultSetsEnabled: true
    #使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动。 系统默认值是true
    useColumnLabel: true
    #允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如Derby）。 系统默认值是false
    useGeneratedKeys: true
    #配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用预处理语句。BATCH 执行器重用语句和批量更新 系统默认值是SIMPLE
    defaultExecutorType: SIMPLE
    #设置超时时间，它决定驱动等待一个数据库响应的时间。 系统默认值是null
    defaultStatementTimeout: 25000
    #设置字段和类是否支持驼峰命名的属性。 系统默认值是false
    mapUnderscoreToCamelCase: true
    #打印查询语句
    logImpl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    #配置JdbcTypeForNull, oracle数据库必须配置
    jdbc-type-for-null: 'null'
#    interceptors: com.github.pagehelper.PageInterceptor
##    该参数默认为false
##    设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用
##    和startPage中的pageNum效果一样
#      offsetAsPageNum: true
##     该参数默认为false
##     设置为true时，使用RowBounds分页会进行count查询
#      rowBoundsWithCount: true
##     <!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
##                 <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
#      pageSizeZero: true
##     <!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
##                 <!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
##                 <!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
#      reasonable: false
##     <!-- 支持通过Mapper接口参数来传递分页参数 -->
#      supportMethodsArguments: false
##     <!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
#      returnPageInfo: none
pagehelper:
#分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。
    helperDialect: mysql
    #分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
    reasonable: true
    #支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。
    supportMethodsArguments: true
    #为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
    params: count=countSql
    #    该参数默认为false
    #    设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用
    #    和startPage中的pageNum效果一样
    offsetAsPageNum: true
    #     该参数默认为false
    #     设置为true时，使用RowBounds分页会进行count查询
    rowBoundsWithCount: true
    #     <!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
    #                 <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
    pageSizeZero: true
#     <!-- 支持通过Mapper接口参数来传递分页参数 -->
    supportMethodsArguments: true
    #默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页
    autoRuntimeDialect: true
    #当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类型时，会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接，默认true关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定
    closeConn: true
